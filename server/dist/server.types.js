"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var PATH = require("path");
var app_info_service_1 = require("./services/app-info.service");
var inversify_1 = require("inversify");
var TYPES = {
    AppInfo: Symbol('AppInfoService'),
    TaskRunner: Symbol('TaskRunner'),
    Task: Symbol('Task'),
    SocketService: Symbol('SocketService'),
    ValveControllerService: Symbol('ValveControllerService'),
    PubSubService: Symbol('PubSubService'),
    AppDataService: Symbol('AppDataService'),
    AppProductdataService: Symbol('AppProductdataService'),
    PourControllerService: Symbol('PourControllerService'),
    FunctionDriver: Symbol('FunctionDriver'),
    ConfigurationService: Symbol('ConfigurationService'),
    ConfigurationRepository: Symbol('ConfigurationRepository'),
    ProductDataRepository: Symbol('ProductDataRepository'),
    ProductDataService: Symbol('ProductDataService'),
    DeviceInfo: Symbol('DeviceInfo'),
    UnitState: Symbol('UnitState'),
    ValveAssignmentRepository: Symbol('ValveAssignmentRepository'),
    FileLocations: Symbol('FileLocations')
};
exports.default = TYPES;
var DeviceInfo = /** @class */ (function () {
    function DeviceInfo() {
    }
    return DeviceInfo;
}());
exports.DeviceInfo = DeviceInfo;
var FileLocations = /** @class */ (function () {
    function FileLocations(appInfo) {
        this.appInfo = appInfo;
        this.uiCustomizationsAvailable = PATH.join(this.appInfo.configDir_App, "UICustomizations.json");
        this.userPermissions = PATH.join(this.appInfo.configDir_App, "UserPermissions.json");
        this.driveThruButtons = PATH.join(this.appInfo.configDir_App, "DriveThruButtons.json");
        this.unitState = PATH.join(this.appInfo.configDir_AppData, "UnitState.json");
        this.applySeedFileIfNecessary(this.unitState);
        this.idleState = PATH.join(this.appInfo.configDir_AppData, "idlestate.json");
        this.applySeedFileIfNecessary(this.idleState);
        this.valveAssignmentState = PATH.join(this.appInfo.configDir_AppData, "ValveAssignmentState.json");
        console.log(this.valveAssignmentState);
        this.applySeedFileIfNecessary(this.valveAssignmentState);
        this.valveAssignmentSeed = PATH.join(this.appInfo.configDir_App, "seedfiles", "ValveAssignmentState.json");
        this.valveConfigurationState = PATH.join(this.appInfo.configDir_App, "ValveConfigurations.json");
        this.applySeedFileIfNecessary(this.valveConfigurationState);
        this.valveConfigurationSeed = PATH.join(this.appInfo.configDir_App, "seedfiles", "ValveConfiguraions.json");
        this.mixologyState = PATH.join(this.appInfo.configDir_AppData, "MixologyState.json");
        this.applySeedFileIfNecessary(this.mixologyState);
        this.curatedMixologySeed = PATH.join(this.appInfo.configDir_App, "seedfiles", "MixologyState.json");
        this.mixologyState2 = PATH.join(this.appInfo.configDir_AppData, "MixologyState2.json");
        this.applySeedFileIfNecessary(this.mixologyState2);
        this.topCombinationSeed = PATH.join(this.appInfo.configDir_App, "seedfiles", "TopCombinationState.json");
        this.topCombinationState = PATH.join(this.appInfo.configDir_AppData, "TopCombinationState.json");
        this.applySeedFileIfNecessary(this.topCombinationState);
        this.legacyValveSeed = PATH.join(this.appInfo.configDir_App, "seedfiles", "LegacyValveState.json");
        this.legacyValveState = PATH.join(this.appInfo.configDir_AppData, "LegacyValveState.json");
        this.applySeedFileIfNecessary(this.legacyValveState);
        this.serviceUIState = PATH.join(this.appInfo.configDir_App, "ServiceUI.json");
        this.serviceUIPopupButtonState = PATH.join(this.appInfo.configDir_App, "ServiceUIPopupButtons.json");
        this.productUIItemState = PATH.join(this.appInfo.configDir_App, "ProductUIItems.json");
        this.designFolder = PATH.join(this.appInfo.configDir_App, "design/");
        this.designFlavorFolder = PATH.join(this.appInfo.configDir_App, "design/flavors/");
        this.homeFolder = PATH.join(this.appInfo.configDir_App, "design/homes/");
        this.recipeFolder = PATH.join(this.appInfo.configDir_App, 'recipe');
        this.bibItemFolder = PATH.join(this.appInfo.configDir_App, 'bibItems');
        this.calorieCountState = PATH.join(this.appInfo.configDir_AppData, "CalorieCountState.json");
        this.overrideSeed = PATH.join(this.appInfo.configDir_App, 'seedfiles', "override.json");
        this.overrideState = PATH.join(this.appInfo.configDir_AppData, "override.json");
    }
    FileLocations.prototype.applySeedFileIfNecessary = function (fullyQualifiedFileName) {
        var fs = require('fs');
        if (fs.existsSync(fullyQualifiedFileName)) {
            return;
        }
        var seedfilename = PATH.join(this.appInfo.configDir_App, "SeedFiles", PATH.basename(fullyQualifiedFileName));
        if (!fs.existsSync(seedfilename)) {
            console.log("Required Seed File is missing: ", seedfilename);
            return;
        }
        try {
            fs.createReadStream(seedfilename).pipe(fs.createWriteStream(fullyQualifiedFileName));
        }
        catch (err) {
            console.log("ERROR Unable to apply seed file " + seedfilename + " to " + fullyQualifiedFileName);
            return false;
        }
    };
    FileLocations = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(TYPES.AppInfo)),
        __metadata("design:paramtypes", [app_info_service_1.AppInfoService])
    ], FileLocations);
    return FileLocations;
}());
exports.FileLocations = FileLocations;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
