"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
var inversify_express_utils_1 = require("inversify-express-utils");
var inversify_1 = require("inversify");
var bodyParser = require("body-parser");
var app_info_service_1 = require("./services/app-info.service");
var server_types_1 = require("./server.types");
var socket_service_1 = require("./socket/socket-service");
// import {ValveControllerService} from "./pour/valve-controller-service";
var pub_sub_service_1 = require("./universal/pub-sub.service");
var constants_1 = require("./constant/constants");
var app_data_service_1 = require("./services/app-data.service");
var app_productdata_service_1 = require("./services/app-productdata.service");
// import {PourControllerService} from "./pour/pour-controller-service";
// import {FunctionDriver} from "./pour/function-driver";
var configuration_controller_1 = require("./configuration/configuration-controller");
var configuration_service_1 = require("./configuration/configuration-service");
var product_data_service_1 = require("./configuration/product-data-service");
var configuration_repository_1 = require("./configuration/configuration-repository");
var product_data_repository_1 = require("./configuration/product-data-repository");
var valve_assignment_repository_1 = require("./configuration/valve-assignment-repository");
var device_info_1 = require("./unitstate/device-info");
// import Kernel from "inversify/dts/kernel/kernel";
// import {AppInfoService} from "./services/app-info";
// import TYPES from "./server.types";
// import * as bodyParser from "body-parser";
// prepare the ioc container
var kernel = new inversify_1.Kernel();
global["kernel"] = kernel;
var path = require('path'), fs = require('fs');
// service definitions
kernel.bind(server_types_1.default.AppInfo).to(app_info_service_1.AppInfoService).inSingletonScope();
kernel.bind(server_types_1.default.SocketService).to(socket_service_1.SocketService).inSingletonScope();
kernel.bind(server_types_1.default.DeviceInfo).to(device_info_1.DeviceInfo).inSingletonScope();
kernel.bind(server_types_1.default.AppDataService).to(app_data_service_1.AppDataService).inSingletonScope();
kernel.bind(server_types_1.default.AppProductdataService).to(app_productdata_service_1.AppProductdataService).inSingletonScope();
kernel.bind(inversify_express_utils_1.TYPE.Controller).to(configuration_controller_1.ConfigurationController).inSingletonScope()
    .whenTargetNamed(constants_1.TAGS.ConfigurationController);
kernel.bind(server_types_1.default.PubSubService).to(pub_sub_service_1.PubSubService).inSingletonScope();
kernel.bind(server_types_1.default.ConfigurationService).to(configuration_service_1.ConfigurationService).inSingletonScope();
kernel.bind(server_types_1.default.ConfigurationRepository).to(configuration_repository_1.ConfigurationRepository).inSingletonScope();
kernel.bind(server_types_1.default.ProductDataService).to(product_data_service_1.ProductDataService).inSingletonScope();
kernel.bind(server_types_1.default.ProductDataRepository).to(product_data_repository_1.ProductDataRepository).inSingletonScope();
kernel.bind(server_types_1.default.ValveAssignmentRepository).to(valve_assignment_repository_1.ValveAssignmentRepository).inSingletonScope();
kernel.bind(server_types_1.default.FileLocations).to(server_types_1.FileLocations).inSingletonScope();
// kernel.bind<interfaces.Controller>(TYPES.PourControllerService)
// .to(PourControllerService).inSingletonScope().whenTargetNamed(TAGS.PourControllerService);
// kernel.bind<FunctionDriver>(TYPES.FunctionDriver).to(FunctionDriver).inSingletonScope().whenTargetNamed(TAGS.FunctionDriver);
// kernel.bind<ValveControllerService>(TYPES.ValveControllerService).to(ValveControllerService).inSingletonScope();
// CORS middleware
var allowCrossDomain = function (req, res, next) {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
    res.header('Access-Control-Allow-Headers', 'Content-Type');
    next();
};
// start the server
var server = new inversify_express_utils_1.InversifyExpressServer(kernel);
server.setConfig(function (app) {
    app.use(bodyParser.json());
    app.use(allowCrossDomain);
});
var app = server.build();
app.use(bodyParser.urlencoded({
    extended: true
}));
device_info_1.DeviceInfo.initialize();
var appInfo = kernel.get(server_types_1.default.AppInfo);
app.listen(appInfo.config.serverPort);
console.log("API Server started on port " + appInfo.config.serverPort + " :)");
// fire up the common services
kernel.get(server_types_1.default.SocketService);
// kernel.get(TYPES.ValveControllerService) ;
// kernel.get(TYPES.PourControllerService) ;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
